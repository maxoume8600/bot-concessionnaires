const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('setup-reglement')
        .setDescription('Cr√©e le salon de r√®glement avec bouton de validation')
        .addChannelOption(option =>
            option.setName('salon')
                .setDescription('Le salon o√π cr√©er le r√®glement (optionnel, cr√©era un nouveau salon si non sp√©cifi√©)')
                .setRequired(false))
        .addStringOption(option =>
            option.setName('titre')
                .setDescription('Titre du r√®glement (optionnel)')
                .setRequired(false))
        .addBooleanOption(option =>
            option.setName('force')
                .setDescription('Remplacer le message existant')
                .setRequired(false)),

    async execute(interaction) {
        try {
            await interaction.deferReply({ ephemeral: true });

            const guild = interaction.guild;
            const force = interaction.options.getBoolean('force') || false;
            const titre = interaction.options.getString('titre') || 'üìã R√®glement du Concessionnaire';
            let targetChannel = interaction.options.getChannel('salon');

            // Cr√©er le salon si non sp√©cifi√©
            if (!targetChannel) {
                // Chercher s'il existe d√©j√† un salon r√®glement
                targetChannel = guild.channels.cache.find(c => 
                    c.name.includes('r√®glement') || 
                    c.name.includes('reglement') || 
                    c.name.includes('rules')
                );

                // Cr√©er le salon s'il n'existe pas
                if (!targetChannel) {
                    targetChannel = await guild.channels.create({
                        name: 'üìã-r√®glement',
                        type: 0, // Text channel
                        topic: 'R√®glement du concessionnaire - Validez votre acceptation',
                        permissionOverwrites: [
                            {
                                id: guild.roles.everyone.id,
                                allow: ['ViewChannel', 'ReadMessageHistory'],
                                deny: ['SendMessages', 'AddReactions']
                            }
                        ]
                    });
                }
            }

            // V√©rifier s'il y a d√©j√† un message de r√®glement
            const existingMessages = await targetChannel.messages.fetch({ limit: 10 });
            const existingRuleMessage = existingMessages.find(msg => 
                msg.author.id === interaction.client.user.id && 
                msg.embeds.length > 0 && 
                msg.embeds[0].title?.includes('R√®glement')
            );

            if (existingRuleMessage && !force) {
                return await interaction.editReply({
                    content: `‚ùå Un message de r√®glement existe d√©j√† dans ${targetChannel}.\nUtilisez l'option \`force: true\` pour le remplacer.`
                });
            }

            // Contenu du r√®glement
            const reglementContent = `
            **üè¢ R√àGLES G√âN√âRALES**
            
            **1. Respect et courtoisie**
            ‚Ä¢ Respectez tous les membres du personnel et les clients
            ‚Ä¢ Langage appropri√© en toutes circonstances
            ‚Ä¢ Aucun propos discriminatoire ou offensant
            
            **2. Professionnalisme**
            ‚Ä¢ Tenue vestimentaire appropri√©e pendant les heures de service
            ‚Ä¢ Ponctualit√© lors des prises de service
            ‚Ä¢ Repr√©senter dignement l'entreprise
            
            **üïê HORAIRES ET PR√âSENCE**
            
            **3. Prise de service obligatoire**
            ‚Ä¢ Utiliser la commande \`/service\` pour prendre et terminer son service
            ‚Ä¢ Minimum 2h de service cons√©cutives
            ‚Ä¢ Pr√©venir en cas d'absence
            
            **4. Absences**
            ‚Ä¢ Signaler toute absence dans le salon pr√©vu
            ‚Ä¢ Absences r√©p√©t√©es non justifi√©es = sanctions
            
            **ÔøΩ RELATIONS PROFESSIONNELLES**
            
            **5. Travail d'√©quipe**
            ‚Ä¢ Collaboration et entraide entre coll√®gues
            ‚Ä¢ Communication respectueuse avec la hi√©rarchie
            ‚Ä¢ Partage des informations importantes
            
            **6. Accueil et service**
            ‚Ä¢ Accueil chaleureux et professionnel
            ‚Ä¢ √âcoute active des demandes
            ‚Ä¢ Orientation et assistance des visiteurs
            
            **‚ö†Ô∏è SANCTIONS**
            
            **Avertissement** : Non-respect mineur des r√®gles
            **Bl√¢me** : R√©cidive ou manquement grave
            **Exclusion temporaire** : Faute grave
            **Licenciement** : Faute lourde ou r√©cidive d'exclusions
            
            **üìû CONTACT DIRECTION**
            
            Pour toute question ou probl√®me, contactez la direction.
            `;

            // Cr√©er l'embed du r√®glement
            const reglementEmbed = new EmbedBuilder()
                .setTitle(titre)
                .setDescription(reglementContent)
                .setColor('#E74C3C')
                .setTimestamp()
                .setFooter({ 
                    text: 'En cliquant sur "J\'accepte", vous vous engagez √† respecter ce r√®glement',
                    iconURL: guild.iconURL() 
                });

            // Cr√©er le bouton de validation
            const validateButton = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('validate_reglement')
                        .setLabel('‚úÖ J\'accepte le r√®glement')
                        .setStyle(ButtonStyle.Success)
                        .setEmoji('üìã')
                );

            // Supprimer l'ancien message s'il existe et que force est activ√©
            if (existingRuleMessage && force) {
                await existingRuleMessage.delete();
            }

            // Envoyer le message de r√®glement
            await targetChannel.send({
                embeds: [reglementEmbed],
                components: [validateButton]
            });

            // Message de confirmation
            const confirmEmbed = new EmbedBuilder()
                .setTitle('‚úÖ R√®glement configur√©')
                .setDescription(`Le r√®glement a √©t√© cr√©√© avec succ√®s dans ${targetChannel}`)
                .addFields(
                    { name: 'üìç Salon', value: `${targetChannel}`, inline: true },
                    { name: 'üéØ Fonctionnalit√©s', value: '‚Ä¢ Message de r√®glement\n‚Ä¢ Bouton de validation\n‚Ä¢ Permissions configur√©es', inline: true }
                )
                .setColor('#27AE60')
                .setTimestamp();

            await interaction.editReply({ embeds: [confirmEmbed] });

        } catch (error) {
            console.error('Erreur setup r√®glement:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå Erreur')
                .setDescription(`Impossible de configurer le r√®glement:\n\`\`\`${error.message}\`\`\``)
                .setColor('#E74C3C')
                .setTimestamp();

            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }
};
