const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('staff-access')
        .setDescription('Gestion de l\'acc√®s complet au serveur (Staff uniquement)')
        .addSubcommand(subcommand =>
            subcommand
                .setName('donner')
                .setDescription('Donne l\'acc√®s √† tous les salons √† un utilisateur')
                .addUserOption(option =>
                    option.setName('utilisateur')
                        .setDescription('L\'utilisateur √† qui donner l\'acc√®s (optionnel)')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('role')
                .setDescription('Cr√©e un r√¥le avec acc√®s complet au serveur')
                .addStringOption(option =>
                    option.setName('nom')
                        .setDescription('Le nom du r√¥le √† cr√©er')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('couleur')
                        .setDescription('La couleur du r√¥le (hex: #FF0000 ou nom: RED)')
                        .setRequired(false)
                )
        ),
    
    async execute(interaction) {
        try {
            // V√©rifier si l'utilisateur a le r√¥le staff
            const staffRole = interaction.guild.roles.cache.find(role => role.name.toLowerCase() === 'staff');
            
            if (!staffRole) {
                return interaction.reply({
                    content: '‚ùå Le r√¥le "Staff" n\'existe pas sur ce serveur.',
                    ephemeral: true
                });
            }

            // V√©rifier si l'utilisateur qui ex√©cute la commande a le r√¥le staff
            if (!interaction.member.roles.cache.has(staffRole.id)) {
                return interaction.reply({
                    content: '‚ùå Vous devez avoir le r√¥le "Staff" pour utiliser cette commande.',
                    ephemeral: true
                });
            }

            const subcommand = interaction.options.getSubcommand();

            if (subcommand === 'donner') {
                await this.handleGiveAccess(interaction);
            } else if (subcommand === 'role') {
                await this.handleCreateRole(interaction);
            }

        } catch (error) {
            console.error('Erreur commande staff-access:', error);
            
            const errorMessage = interaction.deferred ? 
                { content: '‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande.' } :
                { content: '‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande.', ephemeral: true };
                
            if (interaction.deferred) {
                await interaction.editReply(errorMessage);
            } else {
                await interaction.reply(errorMessage);
            }
        }
    },

    async handleGiveAccess(interaction) {

            // D√©termine l'utilisateur cible (celui sp√©cifi√© ou l'utilisateur qui ex√©cute la commande)
            const targetUser = interaction.options.getUser('utilisateur') || interaction.user;
            const targetMember = await interaction.guild.members.fetch(targetUser.id);

            if (!targetMember) {
                return interaction.reply({
                    content: '‚ùå Utilisateur introuvable sur ce serveur.',
                    ephemeral: true
                });
            }

            await interaction.deferReply({ ephemeral: true });

            let successCount = 0;
            let errorCount = 0;
            const errors = [];

            // Parcourir tous les salons du serveur
            const channels = interaction.guild.channels.cache.filter(channel => 
                channel.isTextBased() || channel.type === 2 // Text channels et Voice channels
            );

            for (const [channelId, channel] of channels) {
                try {
                    // Donner les permissions de lecture et √©criture
                    await channel.permissionOverwrites.edit(targetMember, {
                        ViewChannel: true,
                        SendMessages: true,
                        ReadMessageHistory: true,
                        Connect: true, // Pour les salons vocaux
                        Speak: true    // Pour les salons vocaux
                    });
                    successCount++;
                } catch (error) {
                    errorCount++;
                    errors.push(`${channel.name}: ${error.message}`);
                }
            }

            // Message de r√©sultat
            let resultMessage = `‚úÖ **Acc√®s accord√© √† ${targetUser.username}**\n\n`;
            resultMessage += `üìä **Statistiques:**\n`;
            resultMessage += `‚Ä¢ Salons modifi√©s avec succ√®s: **${successCount}**\n`;
            
            if (errorCount > 0) {
                resultMessage += `‚Ä¢ Erreurs rencontr√©es: **${errorCount}**\n\n`;
                
                if (errors.length <= 5) {
                    resultMessage += `‚ùå **Erreurs:**\n`;
                    errors.forEach(error => {
                        resultMessage += `‚Ä¢ ${error}\n`;
                    });
                } else {
                    resultMessage += `‚ùå **Premi√®res erreurs:**\n`;
                    errors.slice(0, 5).forEach(error => {
                        resultMessage += `‚Ä¢ ${error}\n`;
                    });
                    resultMessage += `... et ${errors.length - 5} autres erreurs.`;
                }
            }

            await interaction.editReply({
                content: resultMessage
            });
    },

    async handleCreateRole(interaction) {
        const roleName = interaction.options.getString('nom');
        const roleColor = interaction.options.getString('couleur') || '#5865F2';

        try {
            await interaction.deferReply({ ephemeral: true });

            // V√©rifier si le r√¥le existe d√©j√†
            const existingRole = interaction.guild.roles.cache.find(role => 
                role.name.toLowerCase() === roleName.toLowerCase()
            );

            if (existingRole) {
                return interaction.editReply({
                    content: `‚ùå Le r√¥le "${roleName}" existe d√©j√† sur ce serveur.`
                });
            }

            // Cr√©er le r√¥le avec toutes les permissions n√©cessaires
            const newRole = await interaction.guild.roles.create({
                name: roleName,
                color: roleColor,
                permissions: [
                    PermissionFlagsBits.ViewChannel,
                    PermissionFlagsBits.SendMessages,
                    PermissionFlagsBits.ReadMessageHistory,
                    PermissionFlagsBits.Connect,
                    PermissionFlagsBits.Speak,
                    PermissionFlagsBits.UseVAD,
                    PermissionFlagsBits.EmbedLinks,
                    PermissionFlagsBits.AttachFiles,
                    PermissionFlagsBits.AddReactions,
                    PermissionFlagsBits.UseExternalEmojis,
                    PermissionFlagsBits.UseSlashCommands
                ],
                reason: `R√¥le cr√©√© par ${interaction.user.username} avec la commande /staff-access`
            });

            // Donner acc√®s √† tous les salons pour ce r√¥le
            let successCount = 0;
            let errorCount = 0;
            const errors = [];

            const channels = interaction.guild.channels.cache.filter(channel => 
                channel.isTextBased() || channel.type === 2
            );

            for (const [channelId, channel] of channels) {
                try {
                    await channel.permissionOverwrites.edit(newRole, {
                        ViewChannel: true,
                        SendMessages: true,
                        ReadMessageHistory: true,
                        Connect: true,
                        Speak: true
                    });
                    successCount++;
                } catch (error) {
                    errorCount++;
                    errors.push(`${channel.name}: ${error.message}`);
                }
            }

            let resultMessage = `‚úÖ **R√¥le "${roleName}" cr√©√© avec succ√®s !**\n\n`;
            resultMessage += `üé® **Couleur:** ${roleColor}\n`;
            resultMessage += `üìä **Statistiques:**\n`;
            resultMessage += `‚Ä¢ Salons configur√©s avec succ√®s: **${successCount}**\n`;
            
            if (errorCount > 0) {
                resultMessage += `‚Ä¢ Erreurs rencontr√©es: **${errorCount}**\n`;
            }

            resultMessage += `\nüîß **Permissions accord√©es:**\n`;
            resultMessage += `‚Ä¢ Voir les salons\n`;
            resultMessage += `‚Ä¢ Envoyer des messages\n`;
            resultMessage += `‚Ä¢ Lire l'historique\n`;
            resultMessage += `‚Ä¢ Se connecter aux salons vocaux\n`;
            resultMessage += `‚Ä¢ Parler dans les salons vocaux\n`;
            resultMessage += `‚Ä¢ Utiliser les commandes slash\n`;

            await interaction.editReply({
                content: resultMessage
            });

        } catch (error) {
            console.error('Erreur cr√©ation r√¥le:', error);
            if (interaction.deferred) {
                await interaction.editReply({
                    content: '‚ùå Une erreur est survenue lors de la cr√©ation du r√¥le.'
                });
            } else {
                await interaction.reply({
                    content: '‚ùå Une erreur est survenue lors de la cr√©ation du r√¥le.',
                    ephemeral: true
                });
            }
        }
    }
};
