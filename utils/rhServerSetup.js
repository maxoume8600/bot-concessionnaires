const { EmbedBuilder, ChannelType, PermissionFlagsBits, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');

class RHServerSetup {
    constructor(client) {
        this.client = client;
    }

    async setupRHServer(guild) {
        try {
            console.log('üè¢ D√©marrage de la configuration RH du serveur...');

            // Supprimer toutes les cat√©gories et canaux existants li√©s au concessionnaire
            await this.cleanExistingChannels(guild);

            // Cr√©er la nouvelle structure RH
            const structure = await this.createRHStructure(guild);

            // Cr√©er les r√¥les RH
            const roles = await this.createRHRoles(guild);

            // Configurer les permissions
            await this.setupRHPermissions(guild, structure, roles);

            // Envoyer les messages de bienvenue
            await this.sendWelcomeMessages(structure);

            return {
                success: true,
                message: 'Serveur RH configur√© avec succ√®s !',
                structure,
                roles
            };

        } catch (error) {
            console.error('‚ùå Erreur configuration RH:', error);
            return {
                success: false,
                message: `Erreur lors de la configuration: ${error.message}`
            };
        }
    }

    async cleanExistingChannels(guild) {
        console.log('üßπ Suppression de l\'ancienne structure concessionnaire...');

        // Noms des canaux √† supprimer
        const channelsToDelete = [
            'catalogue-vehicules',
            'ventes-vehicules', 
            'gestion-stock',
            'statistiques-ventes',
            'commandes-admin',
            'aide-concessionnaire',
            'annonces-importantes'
        ];

        // Noms des cat√©gories √† supprimer
        const categoriesToDelete = [
            'CONCESSIONNAIRE',
            'GESTION',
            'SUPPORT'
        ];

        // Supprimer les canaux
        for (const channelName of channelsToDelete) {
            const channel = guild.channels.cache.find(c => 
                c.name.toLowerCase().includes(channelName.toLowerCase())
            );
            if (channel) {
                try {
                    await channel.delete();
                    console.log(`‚úÖ Canal supprim√©: ${channelName}`);
                } catch (error) {
                    console.log(`‚ö†Ô∏è Impossible de supprimer: ${channelName}`);
                }
            }
        }

        // Supprimer les cat√©gories
        for (const categoryName of categoriesToDelete) {
            const category = guild.channels.cache.find(c => 
                c.type === ChannelType.GuildCategory && 
                c.name.toUpperCase().includes(categoryName.toUpperCase())
            );
            if (category) {
                try {
                    await category.delete();
                    console.log(`‚úÖ Cat√©gorie supprim√©e: ${categoryName}`);
                } catch (error) {
                    console.log(`‚ö†Ô∏è Impossible de supprimer: ${categoryName}`);
                }
            }
        }

        console.log('üßπ Nettoyage termin√© !');
    }

    async createRHStructure(guild) {
        console.log('üèóÔ∏è Cr√©ation de la structure RH...');

        const structure = {};

        // === CAT√âGORIE GESTION RH ===
        structure.categoryRH = await guild.channels.create({
            name: 'üë• GESTION RH',
            type: ChannelType.GuildCategory,
            position: 0
        });

        // Canal prise de service
        structure.priseService = await guild.channels.create({
            name: 'üü¢ prise-de-service',
            type: ChannelType.GuildText,
            parent: structure.categoryRH,
            topic: 'Canal pour signaler votre prise de service'
        });

        // Canal fin de service
        structure.finService = await guild.channels.create({
            name: 'üî¥ fin-de-service',
            type: ChannelType.GuildText,
            parent: structure.categoryRH,
            topic: 'Canal pour signaler votre fin de service'
        });

        // Canal absences justifi√©es
        structure.absences = await guild.channels.create({
            name: 'üìã absences-justifiees',
            type: ChannelType.GuildText,
            parent: structure.categoryRH,
            topic: 'Canal pour justifier vos absences'
        });

        // === CAT√âGORIE MONITORING ===
        structure.categoryMonitoring = await guild.channels.create({
            name: 'üìä MONITORING RH',
            type: ChannelType.GuildCategory,
            position: 1
        });

        // Canal monitoring temps r√©el
        structure.monitoring = await guild.channels.create({
            name: 'üîç monitoring-temps-reel',
            type: ChannelType.GuildText,
            parent: structure.categoryMonitoring,
            topic: 'Surveillance automatique des connexions FiveM'
        });

        // Canal statistiques RH
        structure.statistiques = await guild.channels.create({
            name: 'üìà statistiques-presence',
            type: ChannelType.GuildText,
            parent: structure.categoryMonitoring,
            topic: 'Statistiques de pr√©sence et performances'
        });

        // Canal logs syst√®me
        structure.logs = await guild.channels.create({
            name: 'üìù logs-rh',
            type: ChannelType.GuildText,
            parent: structure.categoryMonitoring,
            topic: 'Logs automatiques du syst√®me RH'
        });

        // === CAT√âGORIE ADMINISTRATION ===
        structure.categoryAdmin = await guild.channels.create({
            name: '‚öôÔ∏è ADMINISTRATION',
            type: ChannelType.GuildCategory,
            position: 2
        });

        // Canal commandes admin
        structure.admin = await guild.channels.create({
            name: 'üîß commandes-admin',
            type: ChannelType.GuildText,
            parent: structure.categoryAdmin,
            topic: 'Commandes de gestion RH (Admin uniquement)'
        });

        // Canal annonces RH
        structure.annonces = await guild.channels.create({
            name: 'üì¢ annonces-rh',
            type: ChannelType.GuildText,
            parent: structure.categoryAdmin,
            topic: 'Annonces importantes RH'
        });

        console.log('‚úÖ Structure RH cr√©√©e !');
        return structure;
    }

    async createRHRoles(guild) {
        console.log('üë• Cr√©ation des r√¥les RH...');

        const roles = {};

        // Supprimer les anciens r√¥les concessionnaire
        const oldRoles = [
            'Patron Concessionnaire',
            'Vendeur Auto',
            'Client Concessionnaire',
            'Bot Concessionnaire'
        ];

        for (const roleName of oldRoles) {
            const oldRole = guild.roles.cache.find(r => r.name === roleName);
            if (oldRole && oldRole.name !== '@everyone') {
                try {
                    await oldRole.delete();
                    console.log(`‚úÖ Ancien r√¥le supprim√©: ${roleName}`);
                } catch (error) {
                    console.log(`‚ö†Ô∏è Impossible de supprimer: ${roleName}`);
                }
            }
        }

        // Cr√©er les nouveaux r√¥les RH
        roles.directeurRH = await guild.roles.create({
            name: 'üëë Directeur RH',
            color: 0xFF0000, // Utiliser la notation hexad√©cimale num√©rique
            permissions: [
                PermissionFlagsBits.Administrator,
                PermissionFlagsBits.ManageChannels,
                PermissionFlagsBits.ManageRoles,
                PermissionFlagsBits.ManageMessages
            ],
            hoist: true,
            mentionable: true
        });

        roles.responsableRH = await guild.roles.create({
            name: 'üíº Responsable RH',
            color: 0xFFA500, // Utiliser la notation hexad√©cimale num√©rique
            permissions: [
                PermissionFlagsBits.ManageMessages,
                PermissionFlagsBits.ViewChannel,
                PermissionFlagsBits.SendMessages,
                PermissionFlagsBits.ReadMessageHistory
            ],
            hoist: true,
            mentionable: true
        });

        roles.employe = await guild.roles.create({
            name: 'üë§ Employ√©',
            color: 0x00FF00, // Utiliser la notation hexad√©cimale num√©rique
            permissions: [
                PermissionFlagsBits.ViewChannel,
                PermissionFlagsBits.SendMessages,
                PermissionFlagsBits.ReadMessageHistory
            ],
            hoist: true,
            mentionable: true
        });

        roles.botRH = await guild.roles.create({
            name: 'ü§ñ Bot RH',
            color: 0x0099FF, // Utiliser la notation hexad√©cimale num√©rique
            permissions: [
                PermissionFlagsBits.ViewChannel,
                PermissionFlagsBits.SendMessages,
                PermissionFlagsBits.ManageMessages,
                PermissionFlagsBits.EmbedLinks,
                PermissionFlagsBits.AttachFiles,
                PermissionFlagsBits.ReadMessageHistory,
                PermissionFlagsBits.UseExternalEmojis
            ],
            hoist: false,
            mentionable: false
        });

        // Assigner le r√¥le bot
        const botMember = guild.members.cache.get(this.client.user.id);
        if (botMember) {
            await botMember.roles.add(roles.botRH);
        }

        console.log('‚úÖ R√¥les RH cr√©√©s !');
        return roles;
    }

    async setupRHPermissions(guild, structure, roles) {
        console.log('üîí Configuration des permissions RH...');

        // Permissions pour la cat√©gorie GESTION RH
        await structure.categoryRH.permissionOverwrites.create(guild.roles.everyone, {
            ViewChannel: false
        });

        await structure.categoryRH.permissionOverwrites.create(roles.employe, {
            ViewChannel: true,
            SendMessages: true,
            ReadMessageHistory: true
        });

        await structure.categoryRH.permissionOverwrites.create(roles.responsableRH, {
            ViewChannel: true,
            SendMessages: true,
            ReadMessageHistory: true,
            ManageMessages: true
        });

        await structure.categoryRH.permissionOverwrites.create(roles.directeurRH, {
            ViewChannel: true,
            SendMessages: true,
            ReadMessageHistory: true,
            ManageMessages: true,
            ManageChannels: true
        });

        // Permissions pour la cat√©gorie MONITORING (Admin uniquement)
        await structure.categoryMonitoring.permissionOverwrites.create(guild.roles.everyone, {
            ViewChannel: false
        });

        await structure.categoryMonitoring.permissionOverwrites.create(roles.responsableRH, {
            ViewChannel: true,
            SendMessages: false,
            ReadMessageHistory: true
        });

        await structure.categoryMonitoring.permissionOverwrites.create(roles.directeurRH, {
            ViewChannel: true,
            SendMessages: true,
            ReadMessageHistory: true
        });

        // Permissions pour la cat√©gorie ADMINISTRATION (Admin uniquement)
        await structure.categoryAdmin.permissionOverwrites.create(guild.roles.everyone, {
            ViewChannel: false
        });

        await structure.categoryAdmin.permissionOverwrites.create(roles.directeurRH, {
            ViewChannel: true,
            SendMessages: true,
            ReadMessageHistory: true,
            ManageMessages: true
        });

        // Bot permissions partout
        await structure.categoryRH.permissionOverwrites.create(roles.botRH, {
            ViewChannel: true,
            SendMessages: true,
            ReadMessageHistory: true,
            ManageMessages: true,
            EmbedLinks: true
        });

        await structure.categoryMonitoring.permissionOverwrites.create(roles.botRH, {
            ViewChannel: true,
            SendMessages: true,
            ReadMessageHistory: true,
            ManageMessages: true,
            EmbedLinks: true
        });

        await structure.categoryAdmin.permissionOverwrites.create(roles.botRH, {
            ViewChannel: true,
            SendMessages: true,
            ReadMessageHistory: true,
            ManageMessages: true,
            EmbedLinks: true
        });

        console.log('‚úÖ Permissions RH configur√©es !');
    }

    async sendWelcomeMessages(structure) {
        console.log('üì¨ Envoi des messages de bienvenue...');

        // Message prise de service
        const priseServiceEmbed = new EmbedBuilder()
            .setTitle('üü¢ PRISE DE SERVICE')
            .setDescription('Utilisez ce canal pour signaler votre **prise de service**.')
            .addFields(
                { 
                    name: 'üìã Comment faire ?', 
                    value: 'Utilisez la commande `/service prendre` ou cliquez sur le bouton ci-dessous',
                    inline: false 
                },
                { 
                    name: '‚è∞ Informations enregistr√©es', 
                    value: '‚Ä¢ Heure de prise de service\n‚Ä¢ Votre nom et r√¥le\n‚Ä¢ Date automatique',
                    inline: false 
                }
            )
            .setColor('#00FF00')
            .setTimestamp();

        const priseButton = new ButtonBuilder()
            .setCustomId('prise_service')
            .setLabel('üü¢ Prendre le service')
            .setStyle(ButtonStyle.Success);

        const priseRow = new ActionRowBuilder().addComponents(priseButton);

        await structure.priseService.send({ 
            embeds: [priseServiceEmbed], 
            components: [priseRow] 
        });

        // Message fin de service
        const finServiceEmbed = new EmbedBuilder()
            .setTitle('üî¥ FIN DE SERVICE')
            .setDescription('Utilisez ce canal pour signaler votre **fin de service**.')
            .addFields(
                { 
                    name: 'üìã Comment faire ?', 
                    value: 'Utilisez la commande `/service terminer` ou cliquez sur le bouton ci-dessous',
                    inline: false 
                },
                { 
                    name: 'üìä Bilan automatique', 
                    value: '‚Ä¢ Dur√©e totale de service\n‚Ä¢ Heures effectives\n‚Ä¢ Statistiques mises √† jour',
                    inline: false 
                }
            )
            .setColor('#FF0000')
            .setTimestamp();

        const finButton = new ButtonBuilder()
            .setCustomId('fin_service')
            .setLabel('üî¥ Terminer le service')
            .setStyle(ButtonStyle.Danger);

        const finRow = new ActionRowBuilder().addComponents(finButton);

        await structure.finService.send({ 
            embeds: [finServiceEmbed], 
            components: [finRow] 
        });

        // Message absences
        const absencesEmbed = new EmbedBuilder()
            .setTitle('üìã ABSENCES JUSTIFI√âES')
            .setDescription('Utilisez ce canal pour **justifier vos absences**.')
            .addFields(
                { 
                    name: 'üìù Comment justifier ?', 
                    value: 'Cliquez sur le bouton ci-dessous ou utilisez `/absence justifier [raison] [dur√©e]`',
                    inline: false 
                },
                { 
                    name: '‚úÖ Raisons accept√©es', 
                    value: '‚Ä¢ Maladie\n‚Ä¢ Cong√©s\n‚Ä¢ Urgence familiale\n‚Ä¢ Formation\n‚Ä¢ Autre (√† pr√©ciser)',
                    inline: true 
                },
                { 
                    name: '‚ö†Ô∏è Important', 
                    value: 'Pr√©venez **√† l\'avance** quand c\'est possible',
                    inline: true 
                }
            )
            .setColor('#FFA500')
            .setTimestamp();

        const absenceButton = new ButtonBuilder()
            .setCustomId('absence_justifiee')
            .setLabel('üìã D√©clarer une absence')
            .setStyle(ButtonStyle.Secondary);

        const absenceRow = new ActionRowBuilder().addComponents(absenceButton);

        await structure.absences.send({ 
            embeds: [absencesEmbed], 
            components: [absenceRow] 
        });

        // Message monitoring
        const monitoringEmbed = new EmbedBuilder()
            .setTitle('üîç MONITORING TEMPS R√âEL')
            .setDescription('Surveillance automatique des connexions FiveM')
            .addFields(
                { 
                    name: 'üìä Fonctionnalit√©s', 
                    value: '‚Ä¢ D√©tection connexions/d√©connexions\n‚Ä¢ Calcul temps de pr√©sence\n‚Ä¢ Alertes automatiques\n‚Ä¢ Statistiques en temps r√©el',
                    inline: false 
                }
            )
            .setColor('#0099FF')
            .setTimestamp();

        await structure.monitoring.send({ embeds: [monitoringEmbed] });

        console.log('‚úÖ Messages de bienvenue envoy√©s !');
    }
}

module.exports = RHServerSetup;
